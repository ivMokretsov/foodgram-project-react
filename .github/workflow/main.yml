name: CI and CD

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        architecture: 'x64'

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        pip install flake8 flake8-builtins  pep8-naming flake8-broken-line flake8-quotes
        cd backend
        pip install -r requirements.txt
    - name: Test with flake8 and django tests
      run: |
        cd backend
        python -m flake8
  build_backend_and_push_to_docker_hub:
    name: Build backend and push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: always() && github.ref == 'refs/heads/master' && needs.tests.result == 'success'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:1

  build_frontend_and_push_to_docker_hub:
      name: Build frontend and push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: build_backend_and_push_to_docker_hub
      if: always() && github.ref == 'refs/heads/master' && needs.build_backend_and_push_to_docker_hub.result == 'success'

      steps:
        - name: Check out the repository
          uses: actions/checkout@v2

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            context: ./frontend/
            push: true
            tags: ${{ secrets.DOCKER_USERNAME }}/frontend:1

  deploy:
    name: Deploy image on production server
    runs-on: ubuntu-latest
    needs: build_frontend_and_push_to_docker_hub
    if: always() && github.ref == 'refs/heads/master' && needs.build_frontend_and_push_to_docker_hub.result == 'success'

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/foodgram-project-react/infra
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:1
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend:1
            sudo docker-compose stop
            sudo docker-compose rm -f backend frontend
            touch .env
            echo SECRET_KEY=$'{{ secrets.SECRET_KEY }}' >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d
  send_message:
      runs-on: ubuntu-latest
      needs: deploy
      steps:
        - name: send message
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: Foodgram ${{ github.workflow }} успешно выполнен!